{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/SWCard.js","components/SWCardlist.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/Toggle.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SWCard","height","mass","SWCardList","swChar","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","Toggle","searchSwitch","class","App","onSearchChange","event","searchfield","target","value","onAPIChange","api","console","log","fetch","then","response","json","users","results","filteredRobots","filter","robot","toLowerCase","includes","filteredChars","char","SWCardlist","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d22bbcb2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n\treturn (\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}test?200x200`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\trobots.map((user, i) => {\r\n\t\t\t\t\treturn <Card \r\n\t\t\t\t\t\tid={robots[i].id} \r\n\t\t\t\t\t\tname={robots[i].name} \r\n\t\t\t\t\t\temail={robots[i].email}\r\n\t\t\t\t\t/>\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SWCard = ({ name, height, mass, id }) => {\r\n\treturn (\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}test?200x200`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>Height: {height}</p>\r\n\t\t\t\t<p>Mass: {mass}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SWCard;","import React from 'react';\r\nimport SWCard from './SWCard';\r\n\r\nconst SWCardList = ({ swChar }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\tswChar.map((user, i) => {\r\n\t\t\t\t\treturn <SWCard \r\n\t\t\t\t\t\tid={i} \r\n\t\t\t\t\t\tname={swChar[i].name} \r\n\t\t\t\t\t\theight={swChar[i].height}\r\n\t\t\t\t\t\tmass={swChar[i].mass}\r\n\t\t\t\t\t/>\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SWCardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input \r\n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue' \r\n\t\t\t\ttype='search' \r\n\t\t\t\tplaceholder='search characters'\r\n\t\t\t\tonChange={searchChange} />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{ overflowY: 'scroll', border: '5px solid black', height: '500px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info) {\r\n\t\tthis.setState({ hasError: true })\r\n\t}\r\n\r\n\trender () {\r\n\t\tif (this.state.hasError) {\r\n\t\t\treturn <h1>Oops. That is not good. </h1>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundry;","import React from 'react';\r\n\r\nconst Toggle = ({searchSwitch}) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<p class=\"toggle\">Robots</p>\r\n\t\t\t<label class=\"switch\">\r\n\t\t\t\t<input \r\n\t\t\t\t\ttype=\"checkbox\" \r\n\t\t\t\t\tonChange={searchSwitch} />\r\n\t\t\t\t<span class=\"slider\"></span>\r\n\t\t\t</label> \r\n\t\t\t<p class=\"toggle\">Star Wars</p>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Toggle;","import React, { Component } from 'react';\r\nimport CardList from '../components/Cardlist';\r\nimport SWCardlist from '../components/SWCardlist';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport Toggle from '../components/Toggle';\r\n\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t\t\tswChar: [],\r\n\t\t\tsearchfield: '',\r\n\t\t\tapi: 'robots'\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t\t.then(response=> response.json())\r\n\t\t\t.then(users => this.setState({ robots: users}));\r\n\r\n\t\tfetch('https://swapi.co/api/people')\r\n\t\t\t.then(response=> response.json())\r\n\t\t\t.then(users => this.setState({ swChar: users.results}));\t\r\n\t}\r\n\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({ searchfield: event.target.value });\r\n\t}\r\n\r\n\tonAPIChange = (event) => {\r\n\t\tconst api = this.state.api;\r\n\t\tif (api === 'robots') {\r\n\t\t\tthis.setState({ api: 'starwars' });\r\n\t\t} else {\r\n\t\t\tthis.setState({ api: 'robots' });\r\n\t\t}\r\n\t\tconsole.log(this.state.api);\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { robots, swChar, searchfield, api } = this.state;\r\n\t\tconst filteredRobots = robots.filter(robot =>{\r\n\t\t\tif (api === 'robots') {\r\n\t\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n\t\t\t}})\r\n\t\tconst filteredChars = swChar.filter(char =>{\r\n\t\t\tif (api === 'starwars') {\t\r\n\t\t\t\treturn char.name.toLowerCase().includes(searchfield.toLowerCase());\r\n\t\t\t}})\r\n\t\treturn (\r\n\t\t\t<div className='tc'>\r\n\t\t\t\t<h1 className='f1'>Friend Finder</h1>\r\n\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t\t<Toggle searchSwitch={this.onAPIChange}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<ErrorBoundry>\r\n\t\t\t\t\t\t<CardList robots={filteredRobots}/>\r\n\t\t\t\t\t\t<SWCardlist swChar={filteredChars}/>\r\n\t\t\t\t\t</ErrorBoundry>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\n\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}